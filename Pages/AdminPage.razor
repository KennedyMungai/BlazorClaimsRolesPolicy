@page "/AdminPage"

@using BlazorClaimsRolesPolicy.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Security.Claims
@inject IJSRuntime JsRuntime
@inject UserManager<IdentityUser> _userManager
@inject SignInManager<IdentityUser> _signInManager

<h3>AdminPage</h3>
<hr>

<EditForm Model="newUser" OnValidSubmit="@AddUserWithRole">
    <DataAnnotationsValidator/>
    <Microsoft.Mvc.Rendering.ValidationSummary/>

    <div class="form-group row">
        <label for="login" class="col-sm-2 col-form-label">
            Add User
        </label>
        <div class="col-sm-10">
            <InputText id="login" @bind-Value="newUser.LoginName"></InputText>
        </div>
    </div>

    <div class="form-group row">
        <label for="role-select" class="col-sm-2 col-form-label">
            Add Role
        </label>
        <div class="col-sm-10">
            <InputSelect id="role-select" @bind-Value="newUser.UserRole">
                @foreach (var role in selectList)
                {
                    <option value="@role.Value" selected=@role.Selected>@role.Text</option>
                }
            </InputSelect>
        </div>
    </div>
    

    <input type="submit" class="btn btn-primary" value="Save">

</EditForm>

@code {
    User newUser = new();
    List<Role> rolesList = new List<Role>();
    List<SelectListItem> selectList = new List<SelectListItem>();

    protected override async Task OnInitializedAsync()
    {
        rolesList = new List<Role>()
        {
            new Role(){RoleName = "Admin", ID="1"},
            new Role(){RoleName = "HR", ID="2"},
            new Role(){RoleName = "Manager", ID="3"},
            new Role(){RoleName = "User", ID="4"}
        };

        foreach (Role role in rolesList)
        {
            if (rolesList.Count < 1)
            {
                selectList.Add(new SelectListItem()
                    {
                        Text = role.RoleName,
                        Value = role.ID,
                        Selected = true
                    }
                );
            }
            else
            {
                selectList.Add(new SelectListItem()
                    {
                        Text = role.RoleName,
                        Value = role.ID,
                        Selected = false
                    }
                );
            }
        }
    }

    public async void AddUserWithRole(EditContext context)
    {
        var usermodel = context.Model as User;
        var user = new IdentityUser{ 
            UserName = usermodel.LoginName, 
            Email = usermodel.LoginName, 
            EmailConfirmed = true };

        string messagePrompt = "Failed";

        //This line of code creates the user
        var result = await _userManager.CreateAsync(user,"Password123!");

        if (result.Succeeded)
        {
            messagePrompt = "User was added";

            var getRoleFromList = rolesList.FirstOrDefault(x => x.ID == usermodel?.UserRole);
            var roleAddedResult = await _userManager.AddToRoleAsync(user, getRoleFromList?.RoleName ?? "User");

            if (roleAddedResult.Succeeded)
            {
                messagePrompt += " and Role was added";
            }

            var claimAddedResult = await _userManager.AddClaimAsync(user, new Claim(getRoleFromList?.RoleName ?? "User", getRoleFromList?.ID ?? ""));
        }

        await JsRuntime.InvokeVoidAsync("alert",messagePrompt);
    }
}
